{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/App2.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App2 = () => {\n  _s();\n\n  const {\n    ethereum\n  } = window;\n  const [accountAddress, setAccountAddress] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    ethereum.request({\n      method: 'eth_requestAccounts'\n    }).then(res => {\n      if (localStorage.getItem('connected_accounts')) {\n        let _account = JSON.parse(localStorage.getItem('connected_accounts'));\n\n        res.forEach(i => {\n          if (_account.includes(i)) setIsConnected(true);\n        });\n      }\n    });\n  }, []);\n\n  if (!accountAddress) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"authentication__authenticate\",\n        onClick: async () => {\n          ethereum.request({\n            method: 'eth_requestAccounts'\n          }).then(res => {\n            ethereum.request({\n              method: 'eth_signTypedData',\n              from: res[0],\n              params: [[{\n                type: 'string',\n                name: 'Message',\n                value: 'Подтвердите подписание'\n              }], res[0]]\n            }).then(() => {\n              setAccountAddress(res[0]);\n              let _account = [];\n\n              if (localStorage.getItem('connected_accounts')) {\n                _account = JSON.parse(localStorage.getItem('connected_accounts'));\n              }\n\n              _account.push(res[0]);\n\n              localStorage.setItem('connected_accounts', JSON.stringify(_account));\n            });\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }, this), isConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"authentication__warning\",\n        children: \"Your MetaMask account is different from the one you authenticated with before.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account__address\",\n      children: accountAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this);\n  }\n};\n\n_s(App2, \"8szNtym3HwXU/2r3phWRGTb9ewk=\");\n\n_c = App2;\nexport default App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["/usr/src/app/src/App2.tsx"],"names":["useEffect","useState","App2","ethereum","window","accountAddress","setAccountAddress","isConnected","setIsConnected","request","method","then","res","localStorage","getItem","_account","JSON","parse","forEach","i","includes","from","params","type","name","value","push","setItem","stringify"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,MAAMC,IAAI,GAAG,MAAmB;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAeC,MAArB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfG,IAAAA,QAAQ,CAACM,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,EAAoDC,IAApD,CAA0DC,GAAD,IAAc;AACtE,UAAGC,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAH,EAA+C;AAC9C,YAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAX,CAAf;;AACAF,QAAAA,GAAG,CAACM,OAAJ,CAAaC,CAAD,IAAe;AAC1B,cAAGJ,QAAQ,CAACK,QAAT,CAAkBD,CAAlB,CAAH,EACCX,cAAc,CAAC,IAAD,CAAd;AACD,SAHD;AAIA;AACD,KARD;AASA,GAVQ,EAUN,EAVM,CAAT;;AAYA,MAAG,CAACH,cAAJ,EAAoB;AACnB,wBACC;AAAA,8BACC;AAAQ,QAAA,SAAS,EAAC,8BAAlB;AAAiD,QAAA,OAAO,EAAE,YAAY;AACrEF,UAAAA,QAAQ,CAACM,OAAT,CAAiB;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAjB,EAAoDC,IAApD,CAA0DC,GAAD,IAAc;AACtET,YAAAA,QAAQ,CAACM,OAAT,CAAiB;AAAEC,cAAAA,MAAM,EAAE,mBAAV;AAA+BW,cAAAA,IAAI,EAAET,GAAG,CAAC,CAAD,CAAxC;AAA6CU,cAAAA,MAAM,EAAE,CACrE,CACC;AACCC,gBAAAA,IAAI,EAAE,QADP;AAECC,gBAAAA,IAAI,EAAE,SAFP;AAGCC,gBAAAA,KAAK,EAAE;AAHR,eADD,CADqE,EAQrEb,GAAG,CAAC,CAAD,CARkE;AAArD,aAAjB,EASKD,IATL,CASU,MAAM;AACfL,cAAAA,iBAAiB,CAACM,GAAG,CAAC,CAAD,CAAJ,CAAjB;AAEA,kBAAIG,QAAQ,GAAG,EAAf;;AACA,kBAAGF,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAH,EAA+C;AAC9CC,gBAAAA,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAX,CAAX;AACA;;AACDC,cAAAA,QAAQ,CAACW,IAAT,CAAcd,GAAG,CAAC,CAAD,CAAjB;;AACAC,cAAAA,YAAY,CAACc,OAAb,CAAqB,oBAArB,EAA2CX,IAAI,CAACY,SAAL,CAAeb,QAAf,CAA3C;AACA,aAlBD;AAmBA,WApBD;AAqBA;AAtBD;AAAA;AAAA;AAAA;AAAA,cADD,EA0BER,WAAW,iBACX;AAAG,QAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA,oBADD;AAkCA,GAnCD,MAoCK;AACJ,wBACC;AAAG,MAAA,SAAS,EAAC,kBAAb;AAAA,gBACEF;AADF;AAAA;AAAA;AAAA;AAAA,YADD;AAKA;AACD,CA5DD;;GAAMH,I;;KAAAA,I;AA8DN,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst App2 = (): JSX.Element => {\n\tconst { ethereum } = window as any;\n\tconst [accountAddress, setAccountAddress] = useState(null);\n\tconst [isConnected, setIsConnected] = useState(false);\n\n\tuseEffect(() => {\n\t\tethereum.request({ method: 'eth_requestAccounts' }).then((res: any) => {\n\t\t\tif(localStorage.getItem('connected_accounts')) {\n\t\t\t\tlet _account = JSON.parse(localStorage.getItem('connected_accounts') as string);\n\t\t\t\tres.forEach((i: string) => {\n\t\t\t\t\tif(_account.includes(i))\n\t\t\t\t\t\tsetIsConnected(true);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tif(!accountAddress) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button className='authentication__authenticate' onClick={async () => {\n\t\t\t\t\tethereum.request({ method: 'eth_requestAccounts' }).then((res: any) => {\n\t\t\t\t\t\tethereum.request({ method: 'eth_signTypedData', from: res[0], params: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tname: 'Message',\n\t\t\t\t\t\t\t\t\tvalue: 'Подтвердите подписание'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tres[0]\n\t\t\t\t\t\t] }).then(() => {\n\t\t\t\t\t\t\tsetAccountAddress(res[0]);\n\n\t\t\t\t\t\t\tlet _account = [];\n\t\t\t\t\t\t\tif(localStorage.getItem('connected_accounts')) {\n\t\t\t\t\t\t\t\t_account = JSON.parse(localStorage.getItem('connected_accounts') as string);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_account.push(res[0]);\n\t\t\t\t\t\t\tlocalStorage.setItem('connected_accounts', JSON.stringify(_account));\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}}>\n\t\n\t\t\t\t</button>\n\t\t\t\t{isConnected && (\n\t\t\t\t\t<p className='authentication__warning'>\n\t\t\t\t\t\tYour MetaMask account is different from the one you authenticated with before.\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n\telse {\n\t\treturn (\n\t\t\t<p className='account__address'>\n\t\t\t\t{accountAddress}\n\t\t\t</p>\n\t\t);\n\t}\n};\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}